from datetime import datetime

from db.crud.base import Base
from utils.snowflake import get_id
from models.{{ table_name }} import {% set list1 = table_name.split('_') %}{% for item in list1 %}{{ item | capitalize }}{% endfor %}InDB, \
    {% set list1 = table_name.split('_') %}{% for item in list1 %}{{ item | capitalize }}{% endfor %}InCreate, \
    {% set list1 = table_name.split('_') %}{% for item in list1 %}{{ item | capitalize }}{% endfor %}InUpdate


class {% set list1 = table_name.split('_') %}{% for item in list1 %}{{ item | capitalize }}{% endfor %}(Base):
    async def list_{{ table_name }}s(self, offset: int, limit: int) -> list:
        record = await self.exec("count_{{ table_name }}s")
        if not record or not record[0] or record[0][0] == 0:
            return list(), 0

        count = record[0][0]
        {{ table_name }}s = list()

        records = await self.exec("list_{{ table_name }}s", offset=offset, limit=limit)
        if records:
            {{ table_name }}s = [{% set list1 = table_name.split('_') %}{% for item in list1 %}{{ item | capitalize }}{% endfor %}InDB(**record) for record in records]

        return {{ table_name }}s, count


    async def add_{{ table_name }}(self,
        {{ table_name }}: {% set list1 = table_name.split('_') %}{% for item in list1 %}{{ item | capitalize }}{% endfor %}InCreate
    ) -> {% set list1 = table_name.split('_') %}{% for item in list1 %}{{ item | capitalize }}{% endfor %}InDB:
        record = await self.exec("add_{{ table_name }}",
                                id=get_id(),
                            {%- for field in fields %}
                                {%- if field.name != "id" %}
                                {{ field.name }}={{ table_name }}.{{ field.name }},
                                {%- endif %}
                            {%- endfor %}
                                )

        return await self.get_{{ table_name }}_by_id(record[0])


    async def get_{{ table_name }}_by_id(self, id: int) -> {% set list1 = table_name.split('_') %}{% for item in list1 %}{{ item | capitalize }}{% endfor %}InDB:
        record = await self.exec("get_{{ table_name }}_by_id", id)
        if record:
            return {% set list1 = table_name.split('_') %}{% for item in list1 %}{{ item | capitalize }}{% endfor %}InDB(**record)

        return None


    async def delete_{{ table_name }}_by_id(self, id: int) -> None:
        return await self.exec("delete_{{ table_name }}_by_id", id)


    async def update_{{ table_name }}_by_id(self,
        id: int,
        {{ table_name }}: {% set list1 = table_name.split('_') %}{% for item in list1 %}{{ item | capitalize }}{% endfor %}InUpdate
    ) -> datetime:
        record = await self.exec("update_{{ table_name }}_by_id",
                        id=id,
                    {%- for field in fields %}
                        {%- if field.name != "id" and field.name != "creator" %}
                        {{ field.name }}={{ table_name }}.{{ field.name }},
                        {%- endif %}
                    {%- endfor %}
                        )

        return record

