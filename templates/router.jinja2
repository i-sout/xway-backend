from fastapi import APIRouter, Depends, Path, Query, Body, Request
from starlette.status import HTTP_201_CREATED

from models.{{ table_name }} import {{ table_name | capitalize }}InCreate, \
    {{ table_name | capitalize }}ListInResponse, \
    {{ table_name | capitalize }}InResponse, \
    {{ table_name | capitalize }}InUpdate
from db.crud.{{ table_name }} import {{ table_name | capitalize }} as {{ table_name | capitalize }}CRUD
from models.errors import HttpClientError, HttpNotFound
from services.localization import get_gettext

router = APIRouter()


@router.get("/{{ table_name }}s", response_model={{ table_name | capitalize }}ListInResponse)
async def list_{{ table_name }}s(
    request: Request,
    page: int = Query(1, ge=1, title="which page"),
    pagesize: int = Query(20, ge=1, le=100, title="Page size"),
    _=Depends(get_gettext),
) -> {{ table_name | capitalize }}ListInResponse:
    offset = (page - 1) * pagesize
    {{ table_name }}_crud = {{ table_name | capitalize }}CRUD(request.app.state.pgpool)
    {{ table_name }}s, count = await {{ table_name }}_crud.list_{{ table_name }}s(offset, pagesize)

    return {{ table_name | capitalize }}ListInResponse(data={{ table_name }}s, count=count)


@router.get("/{{ table_name }}s/{% raw %}{{% endraw %}{{ table_name }}_id}", response_model={{ table_name | capitalize }}InResponse,)
async def get_{{ table_name }}(
    request: Request,
    {{ table_name }}_id: int = Path(..., title="The ID of the {{ table_name }}"),
    _=Depends(get_gettext),
) -> {{ table_name | capitalize }}InResponse:
    {{ table_name }}_crud = {{ table_name | capitalize }}CRUD(request.app.state.pgpool)
    target_{{ table_name }} = await {{ table_name }}_crud.get_{{ table_name }}_by_id({{ table_name }}_id)
    if not target_{{ table_name }}:
        raise HttpNotFound(_("{{ table_name }} not found"))

    return target_{{ table_name }}


@router.delete("/{{ table_name }}s/{% raw %}{{% endraw %}{{ table_name }}_id}",
               response_model={{ table_name | capitalize }}InResponse,
               )
async def delete_{{ table_name }}(
    request: Request,
    {{ table_name }}_id: int = Path(..., title="The ID of the {{ table_name }}"),
    _=Depends(get_gettext),
) -> {{ table_name | capitalize }}InResponse:
    {{ table_name }}_crud = {{ table_name | capitalize }}CRUD(request.app.state.pgpool)
    target_{{ table_name }} = await {{ table_name }}_crud.get_{{ table_name }}_by_id({{ table_name }}_id)
    if not target_{{ table_name }}:
        raise HttpNotFound(_("{{ table_name }} not found"))

    await {{ table_name }}_crud.delete_{{ table_name }}_by_id({{ table_name }}_id)
    return target_{{ table_name }}


@router.post("/{{ table_name }}s",
             status_code=HTTP_201_CREATED,
             response_model={{ table_name | capitalize }}InResponse,
             )
async def add_{{ table_name }}(
    request: Request,
    info: {{ table_name | capitalize }}InCreate = Body(..., embed=True, alias="{{ table_name }}"),
    _=Depends(get_gettext),
) -> {{ table_name | capitalize }}InResponse:
    {%- for field in fields %}
    {%- if not field.optional and field.name != "id" %}
    if not info.{{ field.name }}:
        raise HttpClientError(_("bad {{ field.name }}"))
    {%- endif %}
    {%- endfor %}

    {{ table_name }}_crud = {{ table_name | capitalize }}CRUD(request.app.state.pgpool)
    return await {{ table_name }}_crud.add_{{ table_name }}({{ table_name }}=info)


@router.put("/{{ table_name }}s/{% raw %}{{% endraw %}{{ table_name }}_id}", response_model={{ table_name | capitalize }}InResponse,)
async def update_{{ table_name }}(
    request: Request,
    {{ table_name }}_id: int = Path(..., title="The ID of the {{ table_name }}"),
    info: {{ table_name | capitalize }}InUpdate = Body(..., embed=True, alias="{{ table_name }}"),
    _=Depends(get_gettext),
) -> {{ table_name | capitalize }}InResponse:
    {{ table_name }}_crud = {{ table_name | capitalize }}CRUD(request.app.state.pgpool)
    target_{{ table_name }} = await {{ table_name }}_crud.get_{{ table_name }}_by_id({{ table_name }}_id)
    if not target_{{ table_name }}:
        raise HttpNotFound(_("{{ table_name }} not found"))
    {% for field in fields %}
    {%- if field.name != "id" %}
    target_{{ table_name }}.{{ field.name }} = info.{{ field.name }} or target_{{ table_name }}.{{ field.name }}
    {%- endif %}
    {%- endfor %}

    updated = await {{ table_name }}_crud.update_{{ table_name }}_by_id(
        id={{ table_name }}_id,
        {{ table_name }}=target_{{ table_name }},
    )

    target_{{ table_name }}.updated = updated

    return target_{{ table_name }}
